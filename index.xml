<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SSD: SHORT SLOW DISTANCE</title>
    <link>https://hankei6km.github.io/</link>
    <description>Recent content on SSD: SHORT SLOW DISTANCE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 27 Aug 2020 09:08:35 +0000</lastBuildDate>
    
	<atom:link href="https://hankei6km.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ブログ上でプロッター表示</title>
      <link>https://hankei6km.github.io/posts/2020-08-hugo_shortcode_plotter/</link>
      <pubDate>Thu, 27 Aug 2020 09:08:35 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-08-hugo_shortcode_plotter/</guid>
      <description>&lt;p&gt;最近、&lt;a href=&#34;https://hankei6km.github.io/posts/2020-06-m5stic-c-heart-rate-monitor-ble-intro/&#34;&gt;M5StickC 心拍計&lt;/a&gt; のログ出力を
無線化し運動時の記録をとるようにしたのですが、
毎回の記録を表計算ソフトで個別にグラフ化するのも厳しくなってきたので、
&lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;Hugo の Shortcode&lt;/a&gt; でブログ上にプロッターぽいものを表示できるようにしてみました。&lt;/p&gt;

&lt;p&gt;データを丸ごと JSON で埋め込んでいることもあり、件数によってはかなり重いですが、
&lt;a href=&#34;https://apexcharts.com/&#34;&gt;ApexCharts.js&lt;/a&gt; を使っているのでマウス操作での拡大縮小や、アノテーション表示
(今回の例だと&lt;code&gt;peakP&lt;/code&gt;ラベル)もできます。&lt;/p&gt;



&lt;figure&gt;
    &lt;img src=&#34;https://hankei6km.github.io/posts/2020-08-hugo_shortcode_plotter/plotter_intro.gif&#34; style=&#34;width:&#34;&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>川の中の micro:bit が深く静かに計測したデータを ambient で地図上に表示する</title>
      <link>https://hankei6km.github.io/posts/2020-08-microbit-measurement-silent-measurement-deep/</link>
      <pubDate>Mon, 10 Aug 2020 10:43:47 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-08-microbit-measurement-silent-measurement-deep/</guid>
      <description>&lt;p&gt;最近自作しているログ収集ウェブアプリのテストとして、
「通信できない状況で計測されたデータを、後から BLE で同期し活用する」
という想定の実験をしてみました。&lt;/p&gt;

&lt;p&gt;肝心のウェブアプリ自体がまだアップできていないので「なんのこっちゃ」という感じかとは思いますが。。。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&#34;https://hankei6km.github.io/posts/2020-08-microbit-measurement-silent-measurement-deep/microbit-measurement-intro-01.png&#34;&gt;&lt;img src=&#34;https://hankei6km.github.io/posts/2020-08-microbit-measurement-silent-measurement-deep/microbit-measurement-intro-01_hu30513997c466a65ab11a8747b46c7487_241294_600x0_resize_lanczos_2.png&#34;&gt;&lt;/a&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>ジョギングの合間に Raspberry Pi Zero WH で M5StickC のログ採取</title>
      <link>https://hankei6km.github.io/posts/2020-07-logging-jogging-raspberry-pi-zero-wh-m5stickc/</link>
      <pubDate>Sun, 05 Jul 2020 05:49:45 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-07-logging-jogging-raspberry-pi-zero-wh-m5stickc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hankei6km.github.io/posts/2020-06-m5stic-c-heart-rate-monitor-ble-intro/&#34;&gt;M5StickC で作っている心拍計&lt;/a&gt;のパラメーターを調整するとき、「ジョギングしている時の波形の形はこんな感じかな？」と予想しながら値を決めていたのですが、どうにも予想と違うような感じがしてきたので、ジョギング時の各種値を実際に採取してみることにしました。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&#34;https://hankei6km.github.io/posts/2020-07-logging-jogging-raspberry-pi-zero-wh-m5stickc/logging_jogging_intro.jpg&#34;&gt;&lt;img src=&#34;https://hankei6km.github.io/posts/2020-07-logging-jogging-raspberry-pi-zero-wh-m5stickc/logging_jogging_intro_huab08fff026d3c247d7bb52e93564b7aa_1029005_300x0_resize_q75_lanczos.jpg&#34;&gt;&lt;/a&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>TFT_eSprite を Windows Bitmap 形式へ変換し Base64 エンコードするライブラリ(SpriteToBmp)</title>
      <link>https://hankei6km.github.io/posts/2020-07-sprite-to-bmp/</link>
      <pubDate>Fri, 03 Jul 2020 16:01:08 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-07-sprite-to-bmp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://platformio.org/lib/show/7485/SpriteToBmp&#34;&gt;SpriteToBmp&lt;/a&gt; は &lt;a href=&#34;https://hankei6km.github.io/posts/2020-06-m5stic-c-heart-rate-monitor-ble-intro/&#34;&gt;M5StickC で作っている心拍計&lt;/a&gt;のスクリーンショット画像(TFT_eSprite のフレームバッファ)をエンコードする部分をライブラリ化したものです(スクリーンショットを作成する機能は含まれていません)。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&#34;https://hankei6km.github.io/posts/2020-07-sprite-to-bmp/sprite_to_bmp_intro.png&#34;&gt;&lt;img src=&#34;https://hankei6km.github.io/posts/2020-07-sprite-to-bmp/sprite_to_bmp_intro_hu8732836fb0c0e06d16197f3d5ed64c36_91154_600x0_resize_lanczos_2.png&#34;&gt;&lt;/a&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>PlatformIO の Desktop テストを Visual Studio Code でデバッグ</title>
      <link>https://hankei6km.github.io/posts/2020-07-debugging_pio_native_test_in_vscode/</link>
      <pubDate>Fri, 03 Jul 2020 09:45:12 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-07-debugging_pio_native_test_in_vscode/</guid>
      <description>&lt;p&gt;PlatformIO の &lt;a href=&#34;https://docs.platformio.org/en/latest/plus/unit-testing.html#desktop&#34;&gt;Desktop(Native) テスト&lt;/a&gt;は
デスクトップ(PC) 上で動かすので「&lt;a href=&#34;https://code.visualstudio.com/docs/editor/debugging&#34;&gt;Visual Studio Code でデバッグ&lt;/a&gt;できるのでは？」と期待してしまうのですが、
そのための正しい手順というのはなさそうです。&lt;/p&gt;

&lt;p&gt;しかしながら、デバッガーを使いたいと思うことはそれなりにあるので、
「&lt;code&gt;launch.json&lt;/code&gt; を毎回書き換える必要がある」という条件付きですが、
Visual Studio Code でデバッグする方法を考えてみました(ちょっと前から使っていますが、毎回ひと手間必要だけど普通に動いてはいます)。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&#34;https://hankei6km.github.io/posts/2020-07-debugging_pio_native_test_in_vscode/pio_test_vscode_intro.png&#34;&gt;&lt;img src=&#34;https://hankei6km.github.io/posts/2020-07-debugging_pio_native_test_in_vscode/pio_test_vscode_intro_huecd01d4e60558d51d083af94eea45419_49491_600x0_resize_lanczos_2.png&#34;&gt;&lt;/a&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>PlatformIO で RFC 2217 を利用したマイコンボードへのリモート接続</title>
      <link>https://hankei6km.github.io/posts/2020-07-platformio-port-rfc2217/</link>
      <pubDate>Thu, 02 Jul 2020 16:14:07 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-07-platformio-port-rfc2217/</guid>
      <description>&lt;p&gt;M5StickC用の開発は &lt;a href=&#34;https://platformio.org/&#34;&gt;PlatformIO&lt;/a&gt; + &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;(&lt;a href=&#34;https://code.visualstudio.com/docs/remote/containers&#34;&gt;Remote - Container&lt;/a&gt;) で行っているのですが、&lt;code&gt;pio&lt;/code&gt; コマンドをコンテナ上で実行した場合、ほとんどの場合で M5StickC (マイコンボード)への接続経路(ポート)が無いため、アップロードやモニターが出来ないことになります。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&#34;https://hankei6km.github.io/posts/2020-07-platformio-port-rfc2217/pio_port_rfc2217_intro.png&#34;&gt;&lt;img src=&#34;https://hankei6km.github.io/posts/2020-07-platformio-port-rfc2217/pio_port_rfc2217_intro_hu59c97bde48524349e844aea5771480cb_49249_600x0_resize_lanczos_2.png&#34;&gt;&lt;/a&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>M5StickC で BLE対応のスティックタイプな心拍計(概要)</title>
      <link>https://hankei6km.github.io/posts/2020-06-m5stic-c-heart-rate-monitor-ble-intro/</link>
      <pubDate>Mon, 29 Jun 2020 15:19:21 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-06-m5stic-c-heart-rate-monitor-ble-intro/</guid>
      <description>&lt;p&gt;ジョギングの合間などに手軽に心拍数を確認できるデバイスが欲しいなと思っていたところ、M5StickC をお安くゲットできる機会があったので自作してみました(本来ならスマートウォッチ的なものの出番ですが、作ってみたくなってしまったのもは仕方ないということで :-)。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&#34;https://hankei6km.github.io/posts/2020-06-m5stic-c-heart-rate-monitor-ble-intro/heart_rate_monitor_ble_intro.jpg&#34;&gt;&lt;img src=&#34;https://hankei6km.github.io/posts/2020-06-m5stic-c-heart-rate-monitor-ble-intro/heart_rate_monitor_ble_intro_hu0658874efc6a1f8503cf77d514633464_1665886_600x0_resize_q75_lanczos.jpg&#34;&gt;&lt;/a&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Raspberry Pi Zero WH とスパイスボトル</title>
      <link>https://hankei6km.github.io/posts/2020-06-zero-bottole/</link>
      <pubDate>Sat, 27 Jun 2020 08:44:47 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-06-zero-bottole/</guid>
      <description>&lt;p&gt;スマホを公衆無線 LAN へ接続するときに間に挟む安全な Wi-Fi 中継器的なものが欲しいなと思案していたところ、Raspberry Pi Zero WH を 100 均のスパイスボトルに入れてみたら、なんとなく良い感じで雑に持ち歩けるサーバーになりました。&lt;/p&gt;

&lt;figure&gt;&lt;a href=&#34;https://hankei6km.github.io/posts/2020-06-zero-bottole/zero_bottole_1.jpg&#34;&gt;&lt;img src=&#34;https://hankei6km.github.io/posts/2020-06-zero-bottole/zero_bottole_1_hubfd08f81f12ad77388ae49041bbbb703_2088484_600x0_resize_q75_lanczos.jpg&#34;&gt;&lt;/a&gt;&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>First Commit</title>
      <link>https://hankei6km.github.io/posts/2020-06-first-commit/</link>
      <pubDate>Sat, 27 Jun 2020 08:38:48 +0000</pubDate>
      
      <guid>https://hankei6km.github.io/posts/2020-06-first-commit/</guid>
      <description>最初のコミット
何かしらアウトプットしたいときに利用する予定。</description>
    </item>
    
  </channel>
</rss>